<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
      "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Aplicaciones Multimedia</title>
  <meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
  <meta name="author" content="Raquel M. Crespo García, rcrespo@it.uc3m.es" />
  <link REL="SHORTCUT ICON" HREF="http://www.uc3m.es/favicon.ico"> 
  <link href="http://www.it.uc3m.es/rcrespo/docencia/asignatura.css" rel="stylesheet" type="text/css" />
  <link href="http://www.it.uc3m.es/estilo.css" rel="stylesheet" type="text/css" />

  <style TYPE="text/css">
  <!--
  @import url(http://www.it.uc3m.es/rcrespo/docencia/apuntes.css);
  --> 

  .nota {
    color: navy;
    font-style: italic;
  }
  .opt {
    color: DimGrey;
  }
  .code {
    font-style: italic;
  }
  p.pimg {
    text-align : center;
  }
  </style> 

<script type="text/javascript" src="http://www.gast.it.uc3m.es/~igutierrez/amm/p2/ws.js"></script>
</head>

<body>

<!-- BEGIN ADD, 21/05/09; to comply with UC3M corporate image requirements -->
<div class="headerBorderUc3mblue">&nbsp;</div>
<div class="header white">
  <table class="header white">
  <tr>
  <td width="25%"><a href="http://www.uc3m.es/"><img class="logos logoleft" src="http://www.it.uc3m.es/imag/EscudoLogoCorporativo.png" alt="Universidad Carlos III de Madrid"></a></td>
  <td class="header txtcntr" align="center">
  <span class="minititulo">Aplicaciones Multimedia - Curso 2010-11</a>
  <!-- <a href="http://www.it.uc3m.es/rcrespo/docencia/amm/1011/" class="minititulo">Aplicaciones Multimedia - Curso 2010-11</a> -->
  </td>
  <td width="25%"><a href="http://www.it.uc3m.es"><img class="logos logoright" src="http://www.it.uc3m.es/imag/SpanishLogoIT.png" alt="Departamento de Ingeniería Telemática"></td>
  </tr>
  </table>
</div>
<div class="headerBorderUc3mblue"></div>
<!-- END ADD 21/05/09 -->


<!-- Tabla encabezado departamento -->
<table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#000000">
  <tr>
    <td>

<!-- BEGIN SUBSTITUTE, 21/05/09 -->
<!--
      <table width="100%" border="0" cellspacing="1" cellpadding="0" height="50">
-->
      <table width="100%" border="0" cellspacing="1" cellpadding="0">  
<!-- END SUBSTITUTE, 21/05/09 -->


        <tr>
          <td bgcolor="#CCD0D6" width="2000" height="22">
            <div align="right"><a href="http://www.it.uc3m.es/localizacion/localizacion.htm" class="azul">Localizaci&oacute;n</a>
              | <a href="#"></a><a href="http://www.it.uc3m.es/personal/directorio.htm"><span class="rojo">Personal</span></a>
              | <a href="http://www.it.uc3m.es/docencia/docencia.htm" class="azul">Docencia</a>

              | <a href="http://www.it.uc3m.es/investigacion/investigacion.htm" class="azul">Investigaci&oacute;n</a>
              | <a href="http://www.it.uc3m.es/novedades/novedades.htm" class="azul">Novedades</a>
              | <a href="http://www.it.uc3m.es/intranet/intranet.htm" class="azul">Intranet</a>
              &nbsp;&nbsp;</div>
          </td>

        </tr>
      </table>
    </td>
  </tr>
</table>

<!-- Tabla encabezado departamento (fin) -->


<!-- Navegación -->
<p class="nav"><a class="azul"
href="http://www.it.uc3m.es/index.html">Home</a> / <a class="azul"
href="http://www.it.uc3m.es/docencia/docencia.htm">Docencia</a> / <a
class="azul" href="http://www.it.uc3m.es/docencia/grado-audiovisuales.html">Grado en Ingeniería de Sistemas Audiovisuales</a> / <a class="azul" href="http://www.it.uc3m.es/rcrespo/docencia/amm/1011/">Aplicaciones Multimedia</a> <!-- <span class="peq">Aplicaciones Multimedia</span> -->
</p>
<!-- Navegación (fin) -->

<h1>HTML5: Canvas - Animaciones e Interacción</h1>


<!-- Demos -->

<h2 class="minititulo">Objetivo: juego básico de frontón-tenis</h2>

<div class="boxed">

<p>
 HTML5 introduce el elemento <span class="code">&lt;canvas&gt;</span> que permite dibujar gráficos e imágenes mediante scripts (generalmente, con Javascript).
</p>

<p>
 En esta práctica vamos a usar el elemento <span class="code">&lt;canvas&gt;</span> para implementar un juego de frontón muy básico. Este juego se puede convertir de forma sencilla en un juego de tenis para dos jugadores. 
</p>

<p class="pimg">
 <img src="tenis.png" />
</p>

<!--
<p>
 Para simplificar la implementación, primero programaremos una versión individual (tipo <em>frontón</em>). Después añadiremos la parte gráfica correspondiente al 2º jugador (idéntica a la del primero). Y finalmente los cambios en la lógica para mantener el marcador de 2 jugadores en vez de uno. 
</p>

<p>
 Recomendaciones: la práctica se estructura de modo que su realización está guiada paso a paso. En algunos pasos se sugieren una serie de mejoras. Se recomienda implementar primero la funcionalidad básica de la práctica y después revisar las mejoras y pruebas sugeridas. 
</p>
-->

</div>


<h2 class="minititulo">Paso 1: crear una página html con el canvas</h2>

<div class="boxed">

<!--
<p class="nota">
  Elementos utilizados: HTML, CSS
</p>
-->

<p>
  Crea una página html con los elementos básicos: título de ventana, título (heading) de página, estilos, etc.
</p>

<p>
  Incluye un elemento <em>canvas</em>, especificando su tamaño y su identificador (para poder acceder a él después desde el código Javascript). El tamaño del canvas deberá ser 400(ancho)x300(alto).
</p>

<div class="opt">
<p>
  <em>Posibles mejoras:</em> Utiliza estilos CSS para mejorar el aspecto del canvas
</p>
<ul>
  <li>Pon el color de fondo del canvas verde</li>
  <li>Pon un borde al canvas. Simula las paredes del frontón poniendo un borde más grueso a las paredes en que rebotará la pelota: superior (top), inferior (bottom) y derecha (right). </li>
</ul>
</div>

</div>


<h2 class="minititulo">Paso 2: acceder al canvas</h2>

<div class="boxed">

<!-- <p class="nota">Elementos utilizados: Javascript</p> -->

<p>
  Escribe una función Javascript (<span class="code">init</span> por ejemplo) para inicializar las variables que necesitaremos para trabajar con el canvas. 
  La función deberá recuperar el objeto canvas y comprobar que se inicializa correctamente. En caso contrario, muestra un cuadro de diálogo alertando del error.
</p>

<p>
  Utiliza una variable global para almacenar el objeto que hace referencia al canvas, de modo que sea accesible desde las distintas funciones que programaremos.
</p>

<p>
  Recuerda que las variable globales son las definidas en el ámbito global del script, de modo que son accesibles desde el código del script y cualquier función definida en él.
</p>

<p>
  Asegúrate de que la función se ejecuta una vez se ha completado la carga de la página. (Recuerda que para recuperar un elemento DOM -en este caso el canvas-, la página tiene que haberse cargado por completo).
</p>

</div>

<h2 class="minititulo">Paso 3: pintar la pelota</h2>

<div class="boxed">

<p>
  Escribe una función Javascript <span class="code">pintar</span> que dibuje la pelota.
</p>

<p>
  Dibuja la pelota como un círculo de radio 10. Coloca el círculo en mitad del canvas. 
</p>

<p>
Agrega el código necesario a la función (<span class="code">init</span>) para que llame a la función que dibuja la pelota.
</p>


<div class="opt">
<p>
  <em>Posibles mejoras:</em>
</p>
<ul>
 <li>Cambia el color de la pelota</li>
 <li>Utiliza funciones para estructurar el código. Programa una función <span class="code">pelota</span> con el código necesario para dibujar el círculo de la pelota. La función recibirá como parámetros el radio de la pelota y su posición. De este modo, la función <span class="code">pintar</span> será más sencilla de entender, sobre todo cuando haya que dibujar más elementos. </li>
</ul>

<p>
  <em>Ensayo y error</em> - Prueba el efecto de estos cambios, pero vuelve a usar el círculo original para continuar la práctica:
</p>
<ul>
 <li>Juega con distintos tamaños y prueba a dibujarla como una circunferencia hueca en vez de un círculo</li>
 <li>Prueba a usar una imagen en vez de dibujar un círculo</li>
</ul>
</div>

</div>

<h2 class="minititulo">Paso 4: movimiento</h2>

<div class="boxed">

<p>
  Para simular el movimiento en una imagen animada, se utiliza la técnica de borrar la imagen y volver a pintarla en la nueva posición. Para que realmente parezca que se mueve (en vez de una secuencia de fotos congeladas), hay que redibujar la imagen con suficiente frecuencia, varias veces por segundo.
</p>

<p>
  Necesitaremos almacenar información sobre la posición actual de la pelota (coordenadas x e y) y el desplazamiento a aplicar en cada movimiento (&Delta;x, &Delta;y). Define las variables globales necesarias para almacenar estos datos.
</p>

<p>
  Agrega el codigo necesario a la función <span class="code">pintar</span> para que:
</p>

<ul>
 <li>borre toda el área del canvas, haciéndola transparente, antes de pintar la pelota (función <span class="code">clearRect</span>)
   <br />
   Recuerda que puedes acceder al tamaño del canvas con las propiedades <span class="code">width</span> y <span class="code">height</span> del objeto canvas.
</li>
 <li>actualice la posición de la pelota cada vez que se dibuja, sumándole &Delta;x y &Delta;y a las correspondientes coordenadas.
</ul>

<p>
  Ahora sólo nos falta asegurarnos de que la función <span class="code">pintar</span> se ejecuta repetidamente cada cierto intervalo de tiempo, en vez de sólo una vez al principio. Para ello, modifica la función  <span class="code">init</span>:
</p>
<ul>
 <li>Elimina la llamada a la función <span class="code">pintar</span>
 </li>
 <li>En su lugar, escribe una llamada a la función <span class="code">setInterval</span>, de modo que la función <span class="code">pintar</span> se ejecute cada 10 milisegundos.
</ul>

<p>¡Recuerda modificar el código para pintar la pelota de modo que se dibuje en la posición indicada por las coordenadas x e y (y no fija en el centro)!</p>


<div class="opt">
<p>
  <em>Ensayo y error</em> - Prueba el efecto de las siguientes modificaciones:
</p>
<ul>
 <li>Prueba distintos valores, positivos y negativos, como desplazamiento (&Delta;x, &Delta;y)</li>
 <li>¿Qué ocurre si no se borra el canvas antes de pintar la pelota en la nueva posición?</li>
 <li>Prueba a cambiar el intervalo de tiempo en <span class="code">setInterval</span>. ¿Qué ocurre si aumentamos su valor a 1 segundo por ejemplo? </li>
</ul>
</div>

</div>

<h2 class="minititulo">Paso 5: detección de colisiones</h2>

<div class="boxed">

<p>
  Agrega el código necesario a la función (<span class="code">pintar</span>) para que la pelota rebote en los límites del canvas.
</p>

<p>
  Para ello tendrás que comprobar, antes de sumar el desplazamiento, si la nueva posición quedaría fuera de los límites del canvas. En ese caso, habría que modificar el valor del desplazamiento, invirtiendo su signo para que rebote en sentido contrario (&Delta;x si llega a una pared lateral o &Delta;y si llega a la pared superior/inferior). Una vez corregido, se puede sumar a la posición como habitualmente. 
</p>

<div class="opt">
<p>
  <em>Ensayo y error:</em>
</p>
<ul>
<!--
 <li>Prueba a que el rebote no sea exactamente simétrico, sino que cambie el ángulo de la pelota</li>
-->
 <li>Prueba a cambiar la velocidad de la pelota (acelerar o decelerar) con cada rebote. Para ello no sólo tendrás que cambiar el signo sino el valor del desplazamiento.</li>
</ul>
</div>

</div>

<h2 class="minititulo">Paso 6: dibujar la raqueta</h2>

<div class="boxed">

<p>
  En esta versión simplificada, las raquetas se mantienen fijas en las paredes laterales, y sólo se mueven verticalmente. En este paso, vamos a dibujar la raqueta izquierda. También "abriremos" la pared izquierda, de modo que la pelota no rebote a menos que choque con la raqueta.
</p>

<p>
  La raqueta se representa mediante un rectángulo. Para dibujarla necesitaremos su tamaño (altura=75 y anchura=10) y su posición (con la coordenada vertical (y) es suficiente puesto que horizontalmente se mantiene fija en la pared). Agrega las variables globales necesarias e inicialízalas de modo que la raqueta aparezca en mitad de la pared, dentro del canvas.
</p>

<p>
  Agrega el código necesario en la función pintar para dibujar la raqueta además de la pelota. 
</p>

<p>
  Modifica el código de detección de colisiones, de modo que la pelota siga rebotando en todas las paredes menos en la izquierda. En el caso de la pared izquierda, la pelota sólo debe rebotar si choca con la raqueta. 
</p>

<p>
  Agrega el código necesario para que, cuando la raqueta no golpea la rebota y se pierde, se detenga la animación (función <span class="code">clearInterval</span>).
</p>

<div class="opt">
<p>
  <em>Posibles mejoras:</em>
</p>
<ul>
 <li>Utiliza funciones para estructurar el código. Programa una función <span class="code">raqueta</span> con el código necesario para dibujar el rectángulo de la raqueta. La función recibirá como parámetro su posición (así podremos reutilizarla para dibujar la segunda raqueta en el futuro). </li>
 <li>Prueba a que el rebote en la raqueta no sea exactamente simétrico, sino que cambie el ángulo (menos simétrico cuanto más lejos del centro de la raqueta)</li>
</ul>
</div>

</div>


<h2 class="minititulo">Paso 7: control mediante el teclado</h2>

<div class="boxed">
<p>
  Para controlar la raqueta mediante el teclado, necesitaremos:
</p>
<ol>
  <li>Detectar que el usuario ha pulsado una tecla</li>
  <li>Mover la raqueta adecuadamente en función de la tecla pulsada ('a' / 'z' para la raqueta izquierda)</li>
</ol>

<p>
  Para detectar que el usuario pulsa/suelta una tecla, se utilizan los eventos de teclado <span class="code">keydown</span>/<span class="code">keyup</span> (respectivamente).
</p>

<p>
  Utiliza una variable global para reflejar el estado de la raqueta: parada (0) / moviéndose hacia arriba (-1) / moviéndose hacia abajo (1).
</p>

<p>
  Programa dos funciones escuchadoras, para los eventos de apretar y soltar tecla. Estas funciones simplemente deben comprobar la tecla pulsada/soltada (en función del valor del código de tecla pulsada/soltada <span class="code">objetoEvento.keyCode</span>) y modificar adecuadamente el valor de la variable de estado. 
</p>

<p class="ref">En esta página puedes probar los eventos de teclado y comprobar el código asociado a cada tecla: <a href="http://www.w3.org/2002/09/tests/keys-cancel2.html">http://www.w3.org/2002/09/tests/keys-cancel2.html</a></p>

<p>
  Asocia los eventos <span class="code">keydown</span>/<span class="code">keyup</span> a las funciones escuchadoras anteriores. 
  Recuerda que para asociar un manejador de eventos puedes usar la función <span class="code">addEventListener</span>. 
  En este caso la invocaremos sobre el objeto <span class="code">document</span>, puesto que queremos que la raqueta responda al pulsar las teclas adecuadas independientemente del elemento html concreto que tenga el foco. 
</p>

<p>
  Modifica la función <span class="code">pintar</span> de modo que, antes de dibujar la raqueta, modifique su posición en función de su estado de movimiento.
</p>

</div>

<h2 class="minititulo">Paso 8: lógica del juego</h2>

<div class="boxed">

<p>
  Agrega el código necesario para mantener un marcador que indique los puntos conseguidos. 
</p>

 <p>Agrega una variable global que registre el número de veces que la pelota golpea la raqueta.</p>

<p>
  Añade también un botón (Jugar/Parar) que permita iniciar una partida nueva. O bien, terminar la partida en curso. 
</p>

<!--
<div class="opt">
<p>
  <em>Posibles mejoras:</em>
</p>
<ul>
 <li></li>
</ul>
</div>
-->
</div>

<h2 class="minititulo">Paso 9 (avanzado): convierte el frontón (individual) en un tenis (2 jugadores)</h2>

<div class="boxed">

<p>
  Repite los pasos anteriores para agregar otra raqueta en el lado derecho. 
</p>

<p>
  Podríamos usar también eventos de teclado para controlar esta segunda raqueta (simplemente, usando 2 teclas más, por ejemplo las flechas del cursor)
</p>

<p>
  Pero también podemos usar el ratón en vez del teclado para controlar la raqueta derecha. 
</p>

<p>
  Para controlar la raqueta con el ratón, tendrás que escuchar el evento <span class="code">mousemove</span>. Cada vez que se mueva el ratón (es decir, cada vez que se produzca un evento <span class="code">mousemove</span>), habrá que comprobar la posición del ratón y mover la raqueta de modo que se acerque a él.
</p>

<p>
  Puedes ver este efecto de control de la raqueta con el ratón en el tutorial incluido en las referencias: <a href="http://billmill.org/static/canvastutorial/index.html">Tutorial sobre Canvas (juego arkanoid paso a paso) [en inglés]</a>
</p>

<div class="opt">
<p>
  <em>Posibles mejoras:</em> dispara tu creatividad :-)
</p>
<ul>
 <li>
  Mejora el aspecto del juego. Puedes por ejemplo dibujar el público en la parte superior del canvas (recuerda redefinir los límites del campo para que la pelota rebote adecuadamente). También puedes animar el público de modo que se mueva cada vez que se marca un tanto. 
 </li>
</ul>
</div>


</div>


<h2 class="minititulo">Referencias</h2>

<div class="boxed">

<ul>
<li>
Apuntes sobre Canvas: <a href="https://aulaglobal2.uc3m.es/file.php/18311/html5_2d.pdf">https://aulaglobal2.uc3m.es/file.php/18311/html5_2d.pdf</a>
</li>



<li>
<a href="https://aulaglobal2.uc3m.es/mod/resource/view.php?id=381064">Apuntes sobre HTML5:</a>   <br />
 <a href="https://aulaglobal2.uc3m.es/mod/resource/view.php?id=391253">Transparencias de HTML5 + Audio/Video </a> <br />
 <a href="https://aulaglobal2.uc3m.es/mod/resource/view.php?id=395577">transparencias html5+audio+video(para firefox 3.5)</a>
</li>

<li>Nombres de colores HTML: <a href="http://www.w3schools.com/html/html_colornames.asp">http://www.w3schools.com/html/html_colornames.asp</a> </li>

<li>El elemento <a href="http://www.w3.org/TR/html5/the-canvas-element.html">canvas</a> de HTML5</li>

<!-- <li>http://www.w3schools.com/js/js_timing.asp</li> -->
<li><a href="http://www.librosweb.es/javascript/">Introducción a Javascript</a></li>

<li><a href="http://www.librosweb.es/javascript/capitulo6/modelo_basico_de_eventos1.html">Modelo de eventos básicos en Javascript</a></li>

<li>Eventos de teclado - código asociado a cada tecla: <a href="http://www.w3.org/2002/09/tests/keys-cancel2.html">http://www.w3.org/2002/09/tests/keys-cancel2.html</a></li>

<li><a href="http://www.codexexempla.org/curso/curso_4_3_e.php">Escuchar eventos Javascript (addEventListener)</a></li>

<!--
Article on event properties and related browser incompatibilities:
http://www.quirksmode.org/js/events_properties.html
-->

<li>Tutorial sobre Canvas (juego arkanoid paso a paso): <a href="http://billmill.org/static/canvastutorial/index.html">http://billmill.org/static/canvastutorial/index.html</a></li>


</ul>

</div>

<p></p>

</body>
</html>
